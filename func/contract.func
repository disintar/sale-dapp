;; Copyright (c) 2022-2023 Disintar LLP Licensed under the Business Source License 1.1

#pragma version >=0.2.0;

#include "asm/helpers.func";
#include "asm/dump-utils.func";
;; Thanks @NickNekilov for idea
;; USE IN PRODUCTION:
;; #include "asm/dump-utils-dummy.func";

#include "op_codes.func";
#include "magic_constants.func";
#include "storage.func";

#include "messages.func";
#include "get_methods.func";
#include "admin_methods.func";


(slice, int) parse_in_msg(cell in_msg_full_cell) inline {
    slice cs = in_msg_full_cell.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    return (sender_address, fwd_fee);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    (slice message_from, int fwd_fee) = parse_in_msg(in_msg_full);

    ;; TODO: Allow multiple assets
    ;; handle internal messages
    (int mode,
            slice nft_address,
            slice deployer_address,
            slice buyer,
            cell sell_config,
            cell price_config) = load_data();

    ~strdump_int("üî¢ Contract mode", mode);
    ;; uninited mode, wait for nft
    if (mode == 0) {
        if (equal_slices(message_from, deployer_address)) {
            ~strdump_safe("Got message from deployer");

            if ((slice_bits(in_msg_body) >= 32) & ~ is_valid_full_address(in_msg_body)) {
                ~strdump_safe("Process admin interface");

                ;; TODO: test admin interface
                ;; try process admin messages
                int op = in_msg_body~load_uint(32);
                int exit_code = process_admin(op, in_msg_body);
                throw(exit_code);
            } else {
                ~strdump_safe("Process init of contract");

                ;; Just allow deploy from deployer

                ;; TODO: test init with jetton address
                ;; If there will be an jetton sale
                ;; Allow to set own jetton address on initialization
                if (slice_bits(in_msg_body) > 2) {
                    ~strdump_safe("Process set of jetton address");

                    if (in_msg_body.preload_uint(2) != 0) {
                        ~strdump_safe("Change jetton address");
                        slice expected_jetton_address = in_msg_body~load_msg_addr();
                        cell new_price_config = repack_price_config_with_jetton_address(price_config, expected_jetton_address);

                        store_data(0,
                                nft_address,
                                deployer_address,
                                buyer,
                                sell_config,
                                new_price_config);
                    }
                }
                throw(0);
            }
        }

        ;; It's easy just to drop all messages
        ;; But if we fucked up and got diffrent NFT / FT it'll be burned
        ;; So I want to add transfer of NFT back, not just bounce
        ;;         ;; here we need to drop all messages from all addresses
        ;;         ;; except nft, which we expect
        ;;         throw_unless(228, equal_slices(message_from, nft_address));

        ;; ownership_assigned#05138d91 query_id:uint64 prev_owner:MsgAddress
        ;; forward_payload:(Either Cell ^Cell) = InternalMsgBody;

        int op = in_msg_body~load_uint(32);
        int query_id = in_msg_body~load_uint(64);
        slice prev_owner_address = in_msg_body~load_msg_addr();

        ;; We expect that previus owner of nft is deployer of this contract
        int deployer_is_prev_owner = equal_slices(prev_owner_address, deployer_address);

        ;; We expect NFT to be the same as in contract
        int is_our_nft = equal_slices(message_from, nft_address);

        ;; We expect op to be ownership_assigned
        int is_ownership_assigned = op == op::nft::ownership_assigned;

        if (is_our_nft & is_ownership_assigned & deployer_is_prev_owner) {
            ~strdump_safe("Initialize contract");

            ;; All good, need to initialize contract
            store_data(1,
                    nft_address,
                    deployer_address,
                    buyer,
                    sell_config,
                    price_config);
            throw(0);
        } elseif (op == op::nft::ownership_assigned) {
            ~strdump_safe("Got not our NFT, bouce it back");

            ;; We got not our nft
            ;; Try to send it back

            ;; First we need to validate money
            ;; Is it enough to run previus code, pay for storage, and send message
            int new_fwd_amount = msg_value - little_gas_amount - fwd_fee;
            throw_unless(229, new_fwd_amount > 0);

            send_nft(message_from, prev_owner_address, new_fwd_amount + fwd_fee);
            throw(0);
        } else {
            ~strdump_safe("Got strange stuff, try to bounce it");

            send_money_or_jettons_back_op(op, in_msg_body, message_from, msg_value, fwd_fee, "Error ü•ÇÔ∏è");
        }
    } elseif (mode == 1) { ;; Seller is inited
        ;; Change settings & admin control if message from deployer
        ;; And have bits

        ;; If a vulnerability occurs in smart contracts,
        ;; the marketplace can take everything off the marketplace to save users' assets
        int is_market = equal_slices(message_from, marketplace);
        int is_owner = equal_slices(message_from, deployer_address);

        if ((is_market | is_owner) & slice_bits(in_msg_body) >= 32) {
            ~strdump_safe("Process message from deployer");

            int op = in_msg_body~load_uint(32);
            int bits = slice_bits(in_msg_body);
            slice text = "";

            if (bits > 0) {
                text = in_msg_body~load_bits(bits);
            }

            ;; Change price
            if (is_owner & op == op::seller::update_sale) {
                ~strdump_safe("Process update sale");

                ;; TODO: add tests
                cell new_price_config = in_msg_body~load_ref();

                ;; Want to be 100% sure that we can parse price config after we will save it to c4
                ;; So nobody could fucked up smart contract after update
                ;; parse function is not impure, but we can use impure_touch
                (int is_ton, _, _, _, _, _) = parse_price_config(price_config);
                is_ton~impure_touch();

                store_data(1,
                        nft_address,
                        deployer_address,
                        buyer,
                        sell_config,
                        new_price_config);
                throw(0);
            } elseif ((op == op::seller::cancel_sell)  | (op == op::seller::text_commands & equal_slices(text, "cancel_sale"))) {
                ~strdump_safe("Process cancel sale");

                store_data(3, ;; set contract to close
                        nft_address,
                        deployer_address,
                        buyer,
                        sell_config,
                        price_config);

                raw_reserve(100000, 0); ;; save little ammount
                send_nft(nft_address, deployer_address, -1); ;; transfer nft back to owner
                throw(0);
            } else {
                ~strdump_safe("Command not found");
                send_money_or_jettons_back_op(op, in_msg_body, message_from, msg_value, fwd_fee, "Error üç≠");
            }

            ;; Here we can't allow admin commands
            ;; Because seller can transfer NFT back
            ;; Need to think of limitations on sending transfer messages to assets inside contract
            ;;             else { ;; or process admin stuff
            ;;                 int exit_code = process_admin(op, in_msg_body);
            ;;                 throw(exit_code);
            ;;             }
        }
                else {
                    ~strdump_safe("Process buy request üí∏");

                    ;; Try to buy
                    (int marketplace_numerator,
                            int marketplace_denominator,
                            int royalty_numerator,
                            int royalty_denominator,
                            slice royalty_destanation) = parse_sell_config(sell_config);

                    (int is_ton,
                            int price,
                            slice limited_address,
                            int end_at,
                            slice my_jetton_address,
                            slice jetton_master) = parse_price_config(price_config);

                    int market_fee = 0;
                    int royalty_fee = 0;

                    ifnot (preload_uint(limited_address, 2) == 0) {
                        ~strdump_safe("Sale is limited, check üîê");

                        ifnot (equal_slices(message_from, limited_address)) {
                            ~strdump_safe("Not for you ‚ù§Ô∏è");
                            send_money_or_jettons_back_body(in_msg_body, message_from, msg_value, fwd_fee, "Not for you ‚ù§Ô∏è");
                        }

                        ~strdump_safe("Sale is limited, all good üîì");
                    }

                    ;; TODO: test this
                    if ((end_at != 0) & (now() >= end_at)) {
                        ~strdump_safe("Salse is limited in time, try bounce ‚è∞");

                        store_data(3, ;; set contract to close
                                nft_address,
                                deployer_address,
                                buyer,
                                sell_config,
                                price_config);

                        ;; Send money back
                        int new_fwd_amount = msg_value - fwd_fee - little_gas_amount;
                        ~strdump_int("Check have we got money on", royalty_fee);

                        ;; Need 100% sure this willn't fail
                        if (new_fwd_amount > 0) {
                            ~strdump_safe("Out of time ‚è∞");
                            send_money_or_jettons_back_body(in_msg_body, message_from, msg_value, fwd_fee, "Out of time ‚è∞");
                        }

                        raw_reserve(100000, 0); ;; save little ammount
                        send_nft(nft_address, deployer_address, -1); ;; transfer nft back to owner
                        throw(0);
                    }

                    ~strdump_int("Price full on start", price + royalty_fee + market_fee);

                    if (~ workchains_equal?(nft_address, message_from)) {
                        ~strdump_safe("Not same WC üå≠Ô∏è");
                        send_money_or_jettons_back_body(in_msg_body, message_from, msg_value, fwd_fee, "Not same WC üå≠Ô∏è");
                    }

                    if ((marketplace_numerator > 0) & (marketplace_denominator > 0)) {
                        market_fee = min(price, muldiv(price, marketplace_numerator, marketplace_denominator));
                    }
                    ~strdump_int("Market fee calculated", market_fee);
                    price -= market_fee;

                    if ((royalty_numerator > 0) & (royalty_denominator > 0) & (price > 0)) {
                        royalty_fee = min(price, muldiv(price, royalty_numerator, royalty_denominator));
                    }
                    ~strdump_int("Royalty fee calculated", royalty_fee);
                    price -= royalty_fee;
                    ~strdump_int("Price final calculated", price);
                    ~strdump_int("Price full final", price + royalty_fee + market_fee);

                    if (is_ton == 1) {
                        ~strdump_safe("Process buy request for TON üíé");

                        ;; Try to buy with TON

                        ;; Ok, in theory someone can send 1 jetton and many TON
                        ;; If he bought NFT - no problem, he can get his jettons back thrue admin interface
                        ;; If he don't bought NFT - he will get all jettons back with all TONs

                        ;; Buy with TON

                        ;; If price in TON is 0 - then contract is unconfigurated yet (just let this)
                        if ((msg_value - price - royalty_fee - market_fee - little_gas_amount <= 0) | (price == 0)) {
                            ~strdump_safe("No funds üåö");
                            send_money_or_jettons_back_body(in_msg_body, message_from, msg_value, fwd_fee, "No funds üåö");
                        } else {
                            ~strdump_safe("üíé Funds is fine, process...");

                            if (market_fee > 0) {
                                ~strdump_int("üíé Send market fee to marketplace", market_fee);
                                send_message_with_text(marketplace, market_fee, "Market fee, sir ü§å", 1);
                            }

                            if (royalty_fee > 0) {
                                ~strdump_int("üíé Send royalty fee to royalty_destanation", royalty_fee);
                                send_message_with_text(royalty_destanation, royalty_fee, "Hey, your royalty, sir ü§å", 1);
                            }

                            if (price > 0) {
                                ~strdump_int("üíé Send rest of price to deployer", price);
                                tuple wow = unsafe_to_tuple(["ü§≠", "üò±", "ü•≥", "üëÄ", "ü´∂"]);
                                int wow_num = rand(5);
                                send_message_with_text(deployer_address, price, wow.at(wow_num), 1);
                            }

                            raw_reserve(100000, 0); ;; save little ammount
                            send_nft(nft_address, message_from, -1); ;; transfer nft

                            store_data(2, ;; change mode to 2 (nft was bought)
                                    nft_address,
                                    deployer_address,
                                    message_from, ;; change who was bought nft
                                    sell_config,
                                    price_config);

                            ~strdump_safe("Item is bought ü•≥ for üíé!");
                            throw(0);
                        }
                    } else {
                        ;; Try to buy with jettons
                        ~strdump_safe("Process buy request for Jetton ü™ô");

                        int op = 0;

                        int slice_bits = slice_bits(in_msg_body);
                        ~strdump_int("Slice bits: ", slice_bits);

                        if (slice_bits >= 32) {
                            op = in_msg_body~load_uint(32);
                        }
                        ~strdump_int("Op code: ", op);


                        if (op == op::ft::transfer_notification) {
                            ;;                     transfer_notification#7362d09c query_id:uint64 amount:(VarUInteger 16)
                            ;;                               sender:MsgAddress forward_payload:(Either Cell ^Cell)
                            ;;                               = InternalMsgBody;
                            ~strdump_safe("Got Jetton, good ü™ô");


                            if (equal_slices(message_from, my_jetton_address)) {
                                ~strdump_safe("Got our Jetton, very good ü™ô");

                                int query_id = in_msg_body~load_uint(64);
                                int amount = in_msg_body~load_coins();
                                slice sender = in_msg_body~load_msg_addr();
                                int change = amount - price - royalty_fee - market_fee;
                                int msg_cnt = 5;

                                if (royalty_fee <= 0) {
                                    msg_cnt -= 1;
                                }
                                if (market_fee <= 0) {
                                    msg_cnt -= 1;
                                }
                                if (change <= 0) {
                                    msg_cnt -= 1;
                                }
                                ~strdump_int("Message count: ", msg_cnt);

                                ;; Ensure, that we have enough money for transfer
                                int nalogi = (fwd_fee + magic_gas) * msg_cnt;
                                ~strdump_int("Nalogi calculated: ", fwd_fee + magic_gas);

                                int new_fwd_amount = msg_value - nalogi - little_gas_amount;
                                ~strdump_int("Forward ammount calculated: ", new_fwd_amount);

                                if (new_fwd_amount <= 0) {
                                    int nalogi_little = (fwd_fee * 2 + magic_gas);
                                    int new_fwd_amount_little = msg_value - nalogi_little;

                                    if (new_fwd_amount_little >= 0) {
                                        send_jettons_with_text(message_from,
                                                sender,
                                                fwd_fee * 2 + magic_gas,
                                                1,
                                                amount,
                                                "Not enought tons üåö",
                                                sender);
                                        throw(0);
                                    } else {
                                        ~strdump("Not enought tons for send 'not enought tons' üåö");
                                        throw(57);
                                    }
                                }

                                ;; Buy with JETTON!
                                if (change < 0) {
                                    send_jettons_with_text(message_from,
                                            sender,
                                            new_fwd_amount + fwd_fee + magic_gas,
                                            1,
                                            amount,
                                            "Not enought jettons üåö",
                                            sender);
                                    throw(0);
                                } else {
                                    int devided_fwd = muldiv(new_fwd_amount, 1, msg_cnt);

                                    if (market_fee > 0) {
                                        send_jettons_with_text(message_from,
                                                marketplace,
                                                fwd_fee + devided_fwd + magic_gas,
                                                devided_fwd,
                                                market_fee,
                                                "Market fee üí´",
                                                sender);
                                    }

                                    if (royalty_fee > 0) {
                                        send_jettons_with_text(message_from,
                                                royalty_destanation,
                                                fwd_fee + devided_fwd + magic_gas,
                                                devided_fwd,
                                                royalty_fee,
                                                "Your royalty üçÅ",
                                                sender);
                                    }

                                    tuple wow = unsafe_to_tuple(["‚ö°Ô∏è", "ü™ê", "üí•", "üåà", "üå™"]);
                                    int wow_num = rand(5);
                                    send_jettons_with_text(message_from,
                                            deployer_address,
                                            fwd_fee + devided_fwd + magic_gas,
                                            devided_fwd,
                                            price,
                                            wow.at(wow_num),
                                            sender);

                                    if (change > 0) {
                                        send_jettons_with_text(message_from,
                                                sender,
                                                fwd_fee + devided_fwd + magic_gas,
                                                1,
                                                change,
                                                "Your change sir üòº",
                                                sender);
                                    }

                                    raw_reserve(100000, 0); ;; save little ammount
                                    send_nft(nft_address, sender, -1); ;; transfer nft

                                    store_data(2, ;; change mode to 2 (nft was bought)
                                            nft_address,
                                            deployer_address,
                                            sender, ;; change who was bought nft
                                            sell_config,
                                            price_config);
                                    throw(0);
                                }
                            } else {
                                send_money_or_jettons_back_op(op, in_msg_body, message_from, msg_value, fwd_fee, "Not our jetton üçÑ");
                            }
                        } else {
                            send_money_back(message_from, msg_value, fwd_fee, "Not jettons üôÑ");
                        }
                    }
                }
    }

    int op = 0;
    if (slice_bits(in_msg_body)) {
        op = in_msg_body~load_uint(32);
    }

    ;; TODO: improve functionality
    if (mode == 2) { ;; NFT was bought
        if (equal_slices(message_from, buyer)) {
            if (op == op::seller::send_nft) { ;; send nft one more time
                raw_reserve(100000, 0); ;; save little ammount
                send_nft(nft_address, message_from, -1); ;; transfer nft
                throw(0);
            } else { ;; or process admin stuff
                int exit_code = process_admin(op, in_msg_body);
                throw(exit_code);
            }
        } else {
            send_money_or_jettons_back_op(op, in_msg_body, message_from, msg_value, fwd_fee, "Error üíê");
        }
    } elseif (mode == 3) { ;; Seller was canceled
        if (equal_slices(message_from, deployer_address)) {
            if (op == op::seller::send_nft) { ;; send nft one more time
                raw_reserve(100000, 0); ;; save little ammount
                send_nft(nft_address, message_from, -1); ;; transfer nft
                throw(0);
            } else { ;; or process admin stuff
                int exit_code = process_admin(op, in_msg_body);
                throw(exit_code);
            }
        } else {
            send_money_or_jettons_back_op(op, in_msg_body, message_from, msg_value, fwd_fee, "Error üåç");
        }
    }

}

() recv_external(slice in_msg_body) impure {
    ;; TODO: allow cancel sale with external message when it's out of time
}

int sum(int a, int b) {
    return a + b;
}